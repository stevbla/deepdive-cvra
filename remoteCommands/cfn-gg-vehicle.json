{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "AWS CloudFormation template for various IoT workshops. Creates an EC2 instance and bootstraps the instance. AMI: amzn-ami-hvm-2017.09.0.20170930-x86_64-gp2",

  "Parameters" : {
    "01C9User": {
      "Description" : "Username for the Cloud9 IDE (min 3, max 10 chars)",
      "Type" : "String",
      "MinLength" : "3",
      "MaxLength" : "10",
      "AllowedPattern" : "^[a-zA-Z0-9]*$"
    },
    "02C9Passwd" : {
      "NoEcho" : "true",
      "Description" : "Password for the Cloud9 username (min 6, max 41 chars)",
      "Type" : "String",
      "MinLength" : "6",
      "MaxLength" : "41",
      "AllowedPattern" : "^[a-zA-Z0-9]*$"
    },
    "03InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "t2.large" ],
      "ConstraintDescription" : "Must be a valid EC2 instance type"
    }
  },

  "Mappings" : {
      "AWSRegion2AMI" : {
        "us-east-1"      : { "AMI" : "ami-8c1be5f6" },
        "us-west-2"      : { "AMI" : "ami-e689729e" },
        "eu-central-1"   : { "AMI" : "ami-c7ee5ca8" },
        "eu-west-1"      : { "AMI" : "ami-acd005d5" },
        "eu-west-2"      : { "AMI" : "ami-1a7f6d7e" },
        "ap-southeast-2" : { "AMI" : "ami-8536d6e7" },
        "ap-northeast-1" : { "AMI" : "ami-2a69be4c" },
        "ap-south-1"     : { "AMI" : "ami-4fc58420" }
    }
  },

  "Resources" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "192.168.128.0/24",
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags" : [
          { "Key" : "CFN Stack", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Name", "Value" : "VPC Device Management WS 192.168.128.0/24" }
        ]
      }
    },

    "PubSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone" : {"Fn::Join": ["", [{"Ref": "AWS::Region"}, "a" ]]},
        "CidrBlock" : "192.168.128.0/25",
        "MapPublicIpOnLaunch" : "true",
        "Tags" : [
          { "Key" : "CFN Stack", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Name", "Value" : "Public Subnet Device Management WS 192.168.128.0/25" }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "CFN Stack", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Name", "Value" : "Inet GW" }
        ]
      }
    },

    "GatewayToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "DependsOn": "GatewayToInternet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "CFN Stack", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Name", "Value" : "PublicRouteTable" }
        ]
      }
    },

    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PubSubnetRTAssoc" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnet" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "GGOtaS3UrlSignerRole": {
       "Type": "AWS::IAM::Role",
       "Properties": {
          "AssumeRolePolicyDocument": {
             "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                   "Service": [ "iot.amazonaws.com" ]
                },
                "Action": [ "sts:AssumeRole" ]
             } ]
          },
          "Policies": [ {
             "PolicyName": {"Fn::Join": ["-", ["GGOtaS3UrlSignerPolicy", {"Ref": "AWS::Region"} ]]},
             "PolicyDocument": {
                 "Version":"2012-10-17",
                 "Statement":[
                   {
                       "Effect": "Allow",
                       "Action": [
                           "s3:GetObject"
                       ],
                       "Resource": [
                           "arn:aws:s3:::eu-central-1-greengrass-updates/*",
                           "arn:aws:s3:::eu-west-1-greengrass-updates/*",
                           "arn:aws:s3:::us-east-1-greengrass-updates/*",
                           "arn:aws:s3:::ap-northeast-1-greengrass-updates/*",
                           "arn:aws:s3:::us-west-2-greengrass-updates/*",
                           "arn:aws:s3:::ap-southeast-2-greengrass-updates/*"
                       ]
                   }
                 ]
               }
             }
           ],
          "Path": "/"
        }
    },

    "IoTWSS3Bucket" : {
      "Type" : "AWS::S3::Bucket"
    },

    "IoTWSIoTPolicy": {
         "Type": "AWS::IoT::Policy",
         "Properties": {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "iot:*"
                      ],
                      "Resource": [
                          "*"
                      ]
                  }
              ]
            }
         }
      },

      "IoTWSRegLambdaJITRRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Statement": [ {
                  "Effect": "Allow",
                  "Principal": {
                     "Service": [ "lambda.amazonaws.com" ]
                  },
                  "Action": [ "sts:AssumeRole" ]
               } ]
            },
            "Policies": [ {
               "PolicyName": {"Fn::Join": ["", ["IoTWSRegLambdaJITRPolicy-", {"Ref": "AWS::Region"} ]]},
               "PolicyDocument": {
                   "Version":"2012-10-17",
                   "Statement":[
                      {
                         "Effect":"Allow",
                         "Action":[
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents"
                         ],
                         "Resource":"arn:aws:logs:*:*:*"
                      },
                      {
                         "Effect":"Allow",
                         "Action":[
                            "iot:CreateThing",
                            "iot:UpdateCertificate",
                            "iot:CreatePolicy",
                            "iot:AttachPolicy",
                            "iot:DescribeCertificate",
                            "iot:AttachThingPrincipal"
                         ],
                         "Resource":"*"
                      }
                   ]
                }
               }
             ],
            "Path": "/"
          }
      },

    "IoTWSIoTServiceRole": {
       "Type": "AWS::IAM::Role",
       "Properties": {
          "AssumeRolePolicyDocument": {
             "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                   "Service": [ "iot.amazonaws.com" ]
                },
                "Action": [ "sts:AssumeRole" ]
             } ]
          },
          "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/service-role/AWSIoTThingsRegistration",
            "arn:aws:iam::aws:policy/service-role/AWSIoTLogging",
            "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
          ],
          "Path": "/"
        }
    },

    "IoTWSEC2Role": {
       "Type": "AWS::IAM::Role",
       "Properties": {
          "AssumeRolePolicyDocument": {
             "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                   "Service": [ "ec2.amazonaws.com" ]
                },
                "Action": [ "sts:AssumeRole" ]
             } ]
          },
          "Path": "/"
        }
    },

    "IoTWSEC2Policy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
          "PolicyName" : {"Fn::Join": ["", ["IoTWSEC2Policy-", {"Ref": "AWS::Region"} ]]},
          "PolicyDocument" : {
              "Statement" : [ {
                  "Effect" : "Allow",
                  "Action" : [
                      "iot:*",
                      "greengrass:*",
                      "s3:*",
                      "iam:PassRole",
                      "lambda:CreateFunction",
                      "lambda:GetFunction",
                      "lambda:ListFunctions",
                      "lambda:DeleteFunction",
                      "lambda:AddPermission",
                      "lambda:GetPolicy",
                      "logs:FilterLogEvents",
                      "dynamodb:PutItem",
                      "dynamodb:GetItem",
                      "dynamodb:Scan"
                  ],
                  "Resource" : "*"
              }]
          },
          "Roles" : [ { "Ref" : "IoTWSEC2Role" } ]
      }
    },

    "IoTWSInstanceProfile": {
       "Type": "AWS::IAM::InstanceProfile",
       "Properties": {
          "Path": "/",
          "Roles": [ {
             "Ref": "IoTWSEC2Role"
          } ]
       }
    },

    "IoTWSSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable access to port 22",
        "Tags" : [ { "Key" : "Name", "Value" : "Prov WS Security Group" } ],
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "8883", "ToPort" : "8883", "CidrIp" : "0.0.0.0/0"}
        ]
      }
    },

    "IoTWSEC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType"   : { "Ref" : "03InstanceType" },
        "ImageId"        : { "Fn::FindInMap" : [ "AWSRegion2AMI", { "Ref" : "AWS::Region" }, "AMI" ]},
        "SubnetId"       : { "Ref" : "PubSubnet" },
        "IamInstanceProfile" : { "Ref" : "IoTWSInstanceProfile" },
        "SecurityGroupIds" : [ {"Ref" : "IoTWSSecurityGroup"} ],
        "Tags"           : [ { "Key" : "Name", "Value" : "Device Management WS" } ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "date\n",
          "echo LANG=en_US.utf-8 >> /etc/environment\n",
          "echo LC_ALL=en_US.UTF-8 >> /etc/environment\n",
          "\n",
          "if ! uname -r |grep amzn ; then\n",
          "    exit 1\n",
          "fi\n",
          "\n",
          "echo '=== INSTALL SOFTWARE ==='\n",
          "yum -y remove aws-cli\n",
          "yum -y install sqlite telnet jq strace git tree gcc glibc-static python27-pip nginx\n",
          "PATH=$PATH:/usr/local/bin\n",
          "pip install boto3\n",
          "pip install awscli\n",
          "pip install AWSIoTPythonSDK\n",
          "pip install AWSIoTDeviceDefenderAgentSDK\n",
          "pip install urllib3\n",
          "pip install geopy\n",
          "pip install pyOpenSSL\n",
          "echo '=== PREPARE FOR GREENGRASS ==='\n",
          "cd /tmp/\n",
          "wget http://aws-workshops-1589389556.eu-west-1.elb.amazonaws.com/workshop-cfn/src/ggc-user-data150.tar\n",
          "wget http://aws-workshops-1589389556.eu-west-1.elb.amazonaws.com/workshop-cfn/src/ggc-user-data160.tar\n",
          "\n",
          "tar xf ggc-user-data150.tar\n",
          "tar zxf /tmp/greengrass-linux-x86-64-1.5.0.tar.gz -C /\n",
          "mv /greengrass /greengrass-1.5.0\n",
          "tar xf ggc-user-data160.tar\n",
          "tar zxf /tmp/greengrass-linux-x86-64-1.6.0.tar.gz -C /\n",
          "useradd -r ggc_user\n",
          "groupadd -r ggc_group\n",
          "\n",
          "echo 'fs.protected_hardlinks = 1' >> /etc/sysctl.d/00-defaults.conf\n",
          "echo 'fs.protected_symlinks = 1' >> /etc/sysctl.d/00-defaults.conf\n",
          "\n",
          "sysctl -p\n",
          "sysctl -p /etc/sysctl.d/00-defaults.conf\n",
          "\n",
          "echo '# AWS Greengrass' >> /etc/fstab\n",
          "echo 'cgroup /sys/fs/cgroup cgroup defaults 0 0' >> /etc/fstab\n",
          "mount -a\n",
          "for i in 1 2; do\n",
          "    mkdir -p /home/ec2-user/ggad-$i\n",
          "    cp /tmp/GGBootcampPubSub.py /home/ec2-user/ggad-$i\n",
          "    cp /tmp/gg_discovery_api.py /home/ec2-user/ggad-$i\n",
          "done\n",
          "cd /usr/local/lib/python2.7/site-packages/\n",
          "unzip /tmp/python_sdk_1_2_0.zip\n",
          "cd /tmp\n",
          "\n",
          "echo '=== PREPARE Greengrass ML WORKSHOP ==='\n",
          "mkdir -p /home/ec2-user/greengrass-ml\n",
          "echo '=== PREPARE IoT DM WORKSHOP ==='\n",
          "wget -O /tmp/dm-ws.tar http://aws-workshops-1589389556.eu-west-1.elb.amazonaws.com/workshop-cfn/src/dm-ws.tar\n",
          "tar xf /tmp/dm-ws.tar -C /home/ec2-user/\n",
          "wget -O /tmp/node-v8.11.3-linux-x64-custom.tgz http://aws-workshops-1589389556.eu-west-1.elb.amazonaws.com/workshop-cfn/src/node-v8.11.3-linux-x64-custom.tgz\n",
          "tar xf /tmp/node-v8.11.3-linux-x64-custom.tgz -C /usr/local/\n",
          "wget -O /tmp/libmosquitto1-1.4.15-2.1.x86_64.rpm http://aws-workshops-1589389556.eu-west-1.elb.amazonaws.com/workshop-cfn/src/libmosquitto1-1.4.15-2.1.x86_64.rpm\n",
          "rpm -i /tmp/libmosquitto1-1.4.15-2.1.x86_64.rpm\n",
          "wget -O /tmp/mosquitto-clients-1.4.15-2.1.x86_64.rpm http://aws-workshops-1589389556.eu-west-1.elb.amazonaws.com/workshop-cfn/src/mosquitto-clients-1.4.15-2.1.x86_64.rpm\n",
          "rpm -i /tmp/mosquitto-clients-1.4.15-2.1.x86_64.rpm\n",
          "cp /home/ec2-user/root.ca.bundle.pem /greengrass/certs/root.ca.pem\n",
          "\n",
          "echo '=== PREPARE DEVICE DEFENDER ==='\n",
          "test -e /home/ec2-user/device-defender && cd /home/ec2-user/device-defender && ",
          "git clone https://github.com/aws-samples/aws-iot-device-defender-agent-sdk-python.git\n",
          "cd /tmp\n",
          "echo '=== CONFIGURE awscli and setting ENVIRONMENT VARS ==='\n",
          "S3_BUCKET=", { "Ref" : "IoTWSS3Bucket" }, "\n",
          "echo \"export S3_BUCKET=$S3_BUCKET\" >> /home/ec2-user/.bashrc\n",
          "echo \"complete -C '/usr/local/bin/aws_completer' aws\" >> /home/ec2-user/.bashrc\n",
          "REGION=", { "Ref" : "AWS::Region" }, "\n",
          "mkdir /home/ec2-user/CA\n",
          "mkdir /home/ec2-user/.aws\n",
          "echo '[default]' > /home/ec2-user/.aws/config\n",
          "echo 'output = json' >> /home/ec2-user/.aws/config\n",
          "echo \"region = $REGION\" >> /home/ec2-user/.aws/config\n",
          "chmod 400 /home/ec2-user/.aws/config\n",
          "ARN_LAMBDA_ROLE=", { "Fn::GetAtt" : ["IoTWSRegLambdaJITRRole", "Arn"] }, "\n",
          "ARN_IOT_PROVISIONING_ROLE=", { "Fn::GetAtt" : ["IoTWSIoTServiceRole", "Arn"] }, "\n",
          "IOT_ENDPOINT=$(aws iot describe-endpoint --region $REGION | jq -r '.endpointAddress')\n",
          "IOT_ENDPOINT_ATS=$(aws iot describe-endpoint --region $REGION --endpoint-type iot:Data-ATS | jq -r '.endpointAddress')\n",
          "IOT_POLICY=", { "Ref": "IoTWSIoTPolicy" }, "\n",
          "echo 'PATH=$PATH:/usr/local/bin' >> /home/ec2-user/.bashrc\n",
          "echo 'export PATH' >> /home/ec2-user/.bashrc\n",
          "echo \"export IOT_ENDPOINT=$IOT_ENDPOINT\" >> /home/ec2-user/.bashrc\n",
          "echo \"export IOT_ENDPOINT_ATS=$IOT_ENDPOINT_ATS\" >> /home/ec2-user/.bashrc\n",
          "echo \"export IOT_POLICY=$IOT_POLICY\" >> /home/ec2-user/.bashrc\n",
          "echo \"export AWS_REGION=$REGION\" >> /home/ec2-user/.bashrc\n",
          "echo \"export ARN_LAMBDA_ROLE=$ARN_LAMBDA_ROLE\" >> /home/ec2-user/.bashrc\n",
          "echo \"export ARN_IOT_PROVISIONING_ROLE=$ARN_IOT_PROVISIONING_ROLE\" >> /home/ec2-user/.bashrc\n",
          "test ! -e /home/ec2-user/.ssh && mkdir -m 700 /home/ec2-user/.ssh\n",
          "sed -e \"s/XXXS3_BUCKETXXX/$S3_BUCKET/\" /home/ec2-user/job-agent/job-document-install-in.json > /home/ec2-user/job-agent/job-document-install.json\n",
          "rm /home/ec2-user/job-agent/job-document-install-in.json\n",
          "\n",
          "echo '=== CREATE SSH KEY-PAIR ==='\n",
          "ssh-keygen -t rsa -b 2048 -f /home/ec2-user/.ssh/iotws -P ", { "Ref": "02C9Passwd" }, "\n",
          "cat /home/ec2-user/.ssh/iotws.pub >> /home/ec2-user/.ssh/authorized_keys\n",
          "aws s3 cp /home/ec2-user/.ssh/iotws s3://${S3_BUCKET}/ssh/iotws --region $REGION\n",
          "chmod +x /tmp/user-data-dm-ws.sh\n",
          "\n",
          "echo '=== CLOUD9 (via user-data-dm-ws.hs) ==='\n",
          "mv /home/ec2-user/user-data-dm-ws.sh /tmp/\n",
          "sudo -u ec2-user /tmp/user-data-dm-ws.sh\n",
          "\n",
          "echo '=== CONFIGURE nginx ==='\n",
          "mv /home/ec2-user/nginx.conf.ssl /tmp/\n",
          "test -e /etc/nginx/nginx.conf && mv /etc/nginx/nginx.conf /etc/nginx/nginx.conf.DIST\n",
          "PUBLIC_HOSTNAME=$(curl http://169.254.169.254/latest/meta-data/public-hostname)\n",
          "SUBJECT=\"/C=DE/O=AWS/OU=IoT Workshops/CN=$PUBLIC_HOSTNAME\"\n",
          "openssl req -newkey rsa:2048 -nodes -keyout /etc/nginx/server.key -x509 -days 365 -out /etc/nginx/server.crt -subj \"$SUBJECT\"\n",
          "sed -e \"s/PUBLIC_HOSTNAME/$PUBLIC_HOSTNAME/\" /tmp/nginx.conf.ssl > /etc/nginx/nginx.conf\n",
          "\n",
          "chkconfig nginx on\n",
          "\n",
          "#iptables -t nat -A PREROUTING  -i eth0 -p tcp --dport 80 -j REDIRECT --to-ports 8080\n",
          "#service iptables save\n",
          "#iptables -n -L -t nat\n",
          "\n",
          "echo '=== START CLOUD9 ==='\n",
          "C9_USER=", { "Ref": "01C9User" }, "\n",
          "C9_PASSWD=", { "Ref": "02C9Passwd" }, "\n",
          "mv /home/ec2-user/cloud9 /etc/init.d/\n",
          "chown root:root /etc/init.d/cloud9\n",
          "chkconfig --add cloud9\n",
          "chkconfig --list cloud9\n",
          "echo \"C9_USER=$C9_USER\" > /etc/default/cloud9\n",
          "echo \"C9_PASSWD=$C9_PASSWD\" >> /etc/default/cloud9\n",
          "chmod 400 /etc/default/cloud9\n",
          "sleep 5\n",
          "service cloud9 start\n",
          "sleep 5\n",
          "echo '=== START nginx ==='\n",
          "service nginx start\n",
          "sleep 5\n",
          "chown -R ec2-user:ec2-user /home/ec2-user/\n",
          "rm -f /tmp/*\n",
          "/opt/aws/bin/cfn-signal --success true",
          "  --stack ", { "Ref": "AWS::StackName" },
          "  --resource IoTWSEC2Instance",
          "  --region ", { "Ref" : "AWS::Region" },
          "\n",
          "date\n",
          "exit 0\n"
          ]]}}
      },
      "CreationPolicy": {
          "ResourceSignal": {
            "Count": 1,
            "Timeout": "PT20M"
         }
      }
    }
  },

  "Outputs" : {
    "EC2Dns" : {
      "Description" : "DNS Name of your instance",
      "Value" : { "Fn::GetAtt" : [ "IoTWSEC2Instance", "PublicDnsName" ]}
    },
    "S3Bucket" : {
      "Description" : "Name of the S3 Bucket for the Device Management workshop",
      "Value" : { "Ref" : "IoTWSS3Bucket" }
    },
    "IoTPolicy" : {
      "Description" : "Name of the IoT policy for JITP",
      "Value" : { "Ref": "IoTWSIoTPolicy" }
    },
    "ArnIoTProvRole" : {
      "Description" : "Role Arn for IoT device provisiong",
      "Value" : { "Fn::GetAtt" : ["IoTWSIoTServiceRole", "Arn"] }
    },
    "ArnLambdaRole" : {
      "Description" : "Role Arn for the JITR Lambda function",
      "Value" : { "Fn::GetAtt" : ["IoTWSRegLambdaJITRRole", "Arn"] }
    },
    "C9IdeUrl" : {
      "Description" : "URL for your Cloud9 IDE",
        "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "IoTWSEC2Instance", "PublicDnsName" ]}, "/" ]] }
    },
    "GGOtaS3UrlSignerRoleArn" : {
      "Description" : "The IAM role arn for OTA which is used to presign the S3 url which links to the Greengrass software update.",
      "Value" : { "Fn::GetAtt" : ["GGOtaS3UrlSignerRole", "Arn"] }
    }
  }
}
